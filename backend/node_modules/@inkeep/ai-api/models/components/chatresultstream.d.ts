import { ChatResultMessageChunkEvent, ChatResultMessageChunkEvent$ } from "./chatresultmessagechunkevent";
import { ChatResultRecordsCitedEvent, ChatResultRecordsCitedEvent$ } from "./chatresultrecordscitedevent";
import * as z from "zod";
export type ChatResultStream = (ChatResultMessageChunkEvent & {
    event: "message_chunk";
}) | (ChatResultRecordsCitedEvent & {
    event: "records_cited";
});
/** @internal */
export declare namespace ChatResultStream$ {
    type Inbound = (ChatResultMessageChunkEvent$.Inbound & {
        event: "message_chunk";
    }) | (ChatResultRecordsCitedEvent$.Inbound & {
        event: "records_cited";
    });
    type Outbound = (ChatResultMessageChunkEvent$.Outbound & {
        event: "message_chunk";
    }) | (ChatResultRecordsCitedEvent$.Outbound & {
        event: "records_cited";
    });
    const inboundSchema: z.ZodType<ChatResultStream, z.ZodTypeDef, Inbound>;
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatResultStream>;
}
//# sourceMappingURL=chatresultstream.d.ts.map