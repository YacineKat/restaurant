"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateResponse$ = void 0;
const event_streams_1 = require("../../lib/event-streams");
const components = __importStar(require("../components"));
const z = __importStar(require("zod"));
/** @internal */
var CreateResponse$;
(function (CreateResponse$) {
    CreateResponse$.inboundSchema = z
        .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        ChatResult: components.ChatResult$.inboundSchema.optional(),
        ChatResultStream: z
            .instanceof((ReadableStream))
            .transform((stream) => {
            return new event_streams_1.EventStream({
                stream,
                decoder(rawEvent) {
                    const schema = components.ChatResultStream$.inboundSchema;
                    return schema.parse(rawEvent);
                },
            });
        })
            .optional(),
    })
        .transform((v) => {
        return {
            contentType: v.ContentType,
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
            ...(v.ChatResult === undefined ? null : { chatResult: v.ChatResult }),
            ...(v.ChatResultStream === undefined
                ? null
                : { chatResultStream: v.ChatResultStream }),
        };
    });
    CreateResponse$.outboundSchema = z
        .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        chatResult: components.ChatResult$.outboundSchema.optional(),
        chatResultStream: z.never().optional(),
    })
        .transform((v) => {
        return {
            ContentType: v.contentType,
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
            ...(v.chatResult === undefined ? null : { ChatResult: v.chatResult }),
            ...(v.chatResultStream === undefined
                ? null
                : { ChatResultStream: v.chatResultStream }),
        };
    });
})(CreateResponse$ || (exports.CreateResponse$ = CreateResponse$ = {}));
//# sourceMappingURL=create.js.map