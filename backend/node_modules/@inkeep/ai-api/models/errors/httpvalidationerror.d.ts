import * as components from "../components";
import * as z from "zod";
/**
 * Validation Error
 */
export type HTTPValidationErrorData = {
    detail?: Array<components.ValidationError> | undefined;
};
/**
 * Validation Error
 */
export declare class HTTPValidationError extends Error {
    detail?: Array<components.ValidationError> | undefined;
    /** The original data that was passed to this error instance. */
    data$: HTTPValidationErrorData;
    constructor(err: HTTPValidationErrorData);
}
/** @internal */
export declare namespace HTTPValidationError$ {
    type Inbound = {
        detail?: Array<components.ValidationError$.Inbound> | undefined;
    };
    const inboundSchema: z.ZodType<HTTPValidationError, z.ZodTypeDef, Inbound>;
    type Outbound = {
        detail?: Array<components.ValidationError$.Outbound> | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HTTPValidationError>;
}
//# sourceMappingURL=httpvalidationerror.d.ts.map