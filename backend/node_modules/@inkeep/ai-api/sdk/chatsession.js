"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatSession = exports.ContinueAcceptEnum = exports.CreateAcceptEnum = void 0;
const hooks_1 = require("../hooks");
const config_1 = require("../lib/config");
const enc$ = __importStar(require("../lib/encodings"));
const http_1 = require("../lib/http");
const schemas$ = __importStar(require("../lib/schemas"));
const sdks_1 = require("../lib/sdks");
const components = __importStar(require("../models/components"));
const errors = __importStar(require("../models/errors"));
const operations = __importStar(require("../models/operations"));
var CreateAcceptEnum;
(function (CreateAcceptEnum) {
    CreateAcceptEnum["applicationJson"] = "application/json";
    CreateAcceptEnum["textEventStream"] = "text/event-stream";
})(CreateAcceptEnum || (exports.CreateAcceptEnum = CreateAcceptEnum = {}));
var ContinueAcceptEnum;
(function (ContinueAcceptEnum) {
    ContinueAcceptEnum["applicationJson"] = "application/json";
    ContinueAcceptEnum["textEventStream"] = "text/event-stream";
})(ContinueAcceptEnum || (exports.ContinueAcceptEnum = ContinueAcceptEnum = {}));
class ChatSession extends sdks_1.ClientSDK {
    constructor(options = {}) {
        const opt = options;
        let hooks;
        if (typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof hooks_1.SDKHooks) {
            hooks = opt.hooks;
        }
        else {
            hooks = new hooks_1.SDKHooks();
        }
        super({
            client: options.httpClient || new http_1.HTTPClient(),
            baseURL: (0, config_1.serverURLFromOptions)(options),
            hooks,
        });
        this.options$ = { ...options, hooks };
        void this.options$;
    }
    /**
     * Create Chat Session
     */
    async create(input, options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        const accept = (options === null || options === void 0 ? void 0 : options.acceptHeaderOverride) || "application/json;q=1, text/event-stream;q=0";
        headers$.set("Accept", accept);
        const payload$ = schemas$.parse(input, (value$) => components.CreateChatSessionWithChatResultInput$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const path$ = this.templateURLComponent("/v0/chat_sessions/chat_results")();
        const query$ = "";
        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        }
        else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "create",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["422", "4XX", "5XX"] };
        const request = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };
        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(responseBody, (val$) => {
                return operations.CreateResponse$.inboundSchema.parse({
                    ...responseFields$,
                    ChatResult: val$,
                });
            }, "Response validation failed");
            return result;
        }
        else if (this.matchResponse(response, 200, "text/event-stream")) {
            const result = schemas$.parse(response.body, (val$) => {
                return operations.CreateResponse$.inboundSchema.parse({
                    ...responseFields$,
                    ChatResultStream: val$,
                });
            }, "Response validation failed");
            return result;
        }
        else if (this.matchResponse(response, 422, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(responseBody, (val$) => {
                return errors.HTTPValidationError$.inboundSchema.parse({
                    ...responseFields$,
                    ...val$,
                });
            }, "Response validation failed");
            throw result;
        }
        else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
    /**
     * Continue Chat Session
     */
    async continue(chatSessionId, continueChatSessionWithChatResultInput, options) {
        var _a;
        const input$ = {
            chatSessionId: chatSessionId,
            continueChatSessionWithChatResultInput: continueChatSessionWithChatResultInput,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        const accept = (options === null || options === void 0 ? void 0 : options.acceptHeaderOverride) || "application/json;q=1, text/event-stream;q=0";
        headers$.set("Accept", accept);
        const payload$ = schemas$.parse(input$, (value$) => operations.ContinueRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = enc$.encodeJSON("body", payload$.ContinueChatSessionWithChatResultInput, {
            explode: true,
        });
        const pathParams$ = {
            chat_session_id: enc$.encodeSimple("chat_session_id", payload$.chat_session_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v0/chat_sessions/{chat_session_id}/chat_results")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        }
        else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "continue",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["422", "4XX", "5XX"] };
        const request = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };
        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(responseBody, (val$) => {
                return operations.ContinueResponse$.inboundSchema.parse({
                    ...responseFields$,
                    ChatResult: val$,
                });
            }, "Response validation failed");
            return result;
        }
        else if (this.matchResponse(response, 200, "text/event-stream")) {
            const result = schemas$.parse(response.body, (val$) => {
                return operations.ContinueResponse$.inboundSchema.parse({
                    ...responseFields$,
                    ChatResultStream: val$,
                });
            }, "Response validation failed");
            return result;
        }
        else if (this.matchResponse(response, 422, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(responseBody, (val$) => {
                return errors.HTTPValidationError$.inboundSchema.parse({
                    ...responseFields$,
                    ...val$,
                });
            }, "Response validation failed");
            throw result;
        }
        else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
exports.ChatSession = ChatSession;
//# sourceMappingURL=chatsession.js.map